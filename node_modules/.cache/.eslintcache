[{"/Users/cuongcay/Documents/STUDY/FRONTEND/CRUD_React/src/index.js":"1","/Users/cuongcay/Documents/STUDY/FRONTEND/CRUD_React/src/App.js":"2","/Users/cuongcay/Documents/STUDY/FRONTEND/CRUD_React/src/reportWebVitals.js":"3","/Users/cuongcay/Documents/STUDY/FRONTEND/CRUD_React/src/Components/Header.js":"4","/Users/cuongcay/Documents/STUDY/FRONTEND/CRUD_React/src/Components/TableCourses.js":"5","/Users/cuongcay/Documents/STUDY/FRONTEND/CRUD_React/src/Components/ModalAddNew.js":"6","/Users/cuongcay/Documents/STUDY/FRONTEND/CRUD_React/src/Components/ModalUpdate.js":"7"},{"size":599,"mtime":1686715927609,"results":"8","hashOfConfig":"9"},{"size":628,"mtime":1686716839935,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1686459857226,"results":"11","hashOfConfig":"9"},{"size":1288,"mtime":1686461111882,"results":"12","hashOfConfig":"9"},{"size":3603,"mtime":1686716364539,"results":"13","hashOfConfig":"9"},{"size":3356,"mtime":1686716765889,"results":"14","hashOfConfig":"9"},{"size":2959,"mtime":1686716929706,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"wqoi9r",{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/cuongcay/Documents/STUDY/FRONTEND/CRUD_React/src/index.js",[],["33","34"],"/Users/cuongcay/Documents/STUDY/FRONTEND/CRUD_React/src/App.js",[],"/Users/cuongcay/Documents/STUDY/FRONTEND/CRUD_React/src/reportWebVitals.js",[],"/Users/cuongcay/Documents/STUDY/FRONTEND/CRUD_React/src/Components/Header.js",[],"/Users/cuongcay/Documents/STUDY/FRONTEND/CRUD_React/src/Components/TableCourses.js",["35","36","37","38"],"import { useState } from 'react';\nimport './Courses.scss';\nimport Courses from './data.json'\nimport ModalAddNew from './ModalAddNew';\nimport ModalUpdate from './ModalUpdate';\nfunction TableCourses(){\n    const [data, setData] = useState(Courses);\n    const [search, setSearch] = useState('')\n    const [showModalAddNew, setShowModalAddNew] = useState(false)\n    const [showModalUpdate, setShowModalUpdate] = useState(false)\n    const handleClose = () =>{\n        setShowModalAddNew(false);\n        setShowModalUpdate(false);\n    }\n    //delete Course\n    const handleDelete = (id) =>{\n        const newlist = data.filter(course => course.id !== id);\n        setData(newlist);\n    }\n    const handleSaveAddNew = (course) =>{\n        setData([course,...data])\n    }\n    //update\n    const [dataCouseUpdate, setDataCouseUpdate] = useState({})\n    const handeUpdateCourse = (course) =>{\n        setShowModalUpdate(true)\n        setDataCouseUpdate(course)\n    }\n    const handeupdateCourseFromModal = (course) =>{\n        let index = data.findIndex(item => item.id === course.id)\n        data[index] = course;\n        setData([...data]);\n    }\n    const handlePageClick =() =>{}\nreturn (\n<div className='courses'>\n    <div className=\"Nav-bar\">\n        <h3>List Course</h3>\n        <button className=\"btn btn-success\" onClick={() => setShowModalAddNew(true)}>Add New</button>\n    </div>\n    <input type=\"text\" onChange={(e) => setSearch(e.target.value)} className=\"form-control search-course\" placeholder=\"Search Course by Title\"></input>\n    <div className=\"row\">\n        {\n            data.filter((course) =>{\n                return search.toLowerCase() === '' ? course : course.title.toLowerCase().includes(search)\n            }).map(course =>(\n                <div key={course.id} className=\"col-sm-6 col-md-4 col-lg-3\">\n                <div className=\"card item-card\" >\n                    <img className=\"card-img-top\" src={course.image} alt=\"Card image cap\" />\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title title\">{course.title}</h5>\n                        <p className=\"card-text card-description\">{course.description}</p>\n                        <div className='button-action'>\n                            <a href=\"#\" className=\"btn btn-warning\" onClick={() => handeUpdateCourse(course)}>Edit</a>\n                            <a href=\"#\" className=\"btn btn-danger\" onClick={() => handleDelete(course.id)} >Delete</a>\n                        </div>\n                    </div>\n                </div>\n        </div>\n            ))\n        }\n        \n    </div>\n    {/* <ReactPaginate\n        nextLabel=\"next >\"\n        onPageChange={handlePageClick}\n        pageRangeDisplayed={3}\n        marginPagesDisplayed={2}\n        pageCount={3}\n        previousLabel=\"< previous\"\n        pageClassName=\"page-item\"\n        pageLinkClassName=\"page-link\"\n        previousClassName=\"page-item\"\n        previousLinkClassName=\"page-link\"\n        nextClassName=\"page-item\"\n        nextLinkClassName=\"page-link\"\n        breakLabel=\"...\"\n        breakClassName=\"page-item\"\n        breakLinkClassName=\"page-link\"\n        containerClassName=\"pagination\"\n        activeClassName=\"active\"\n        renderOnZeroPageCount={null}\n      /> */}\n<ModalAddNew\n    show = {showModalAddNew}\n    handleClose = {handleClose}\n    handleUpdate = {handleSaveAddNew}\n/>\n<ModalUpdate\n    show ={showModalUpdate}\n    handleClose = {handleClose}\n    dataCouseUpdate = {dataCouseUpdate}\n    handeupdateCourseFromModal = {handeupdateCourseFromModal}\n/>\n\n</div>\n)\n}\n\nexport default TableCourses\n","/Users/cuongcay/Documents/STUDY/FRONTEND/CRUD_React/src/Components/ModalAddNew.js",["39"],"import { useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport { toast } from 'react-toastify';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nfunction ModalAddNew(props){\n    \n    const {handleClose ,show, handleUpdate} = props;\n    const formik = useFormik({\n        initialValues: {\n          image: \"\",\n          title: \"\",\n          description: \"\",\n        },\n        validationSchema: Yup.object({\n          image: Yup.string()\n            .required(\"Required image\"),\n          title: Yup.string()\n            .required(\"Required title\"),\n          description: Yup.string()\n            .required(\"Required description\"),\n        }),\n        onSubmit: (values) => {\n          console.log(values);\n          handleUpdate({image: values.image, title: values.title, description: values.description})\n          handleClose(false);\n          toast.success(\"add new course success\")\n        },\n      });\n      const { handleSubmit, handleChange, values, errors } = formik\n    return (\n        \n        <Modal show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>Add New Course</Modal.Title>\n        </Modal.Header>\n        <form action=\"\" onSubmit={handleSubmit}>\n        <Modal.Body>\n        \n            <div className=\"form-group\">\n                <label htmlFor=\"exampleInputImage\">Title</label>\n                <input \n                    name=\"image\"\n                    type=\"text\" \n                    className=\"form-control\" \n                    id=\"exampleInputImage\" \n                    placeholder=\"http://example.jpg\"\n                    onChange={handleChange}\n                    value={values.image}\n                />\n                {\n            <p style={{ color: 'red' }}>{errors.image}</p>\n          }\n            </div>\n            <div className=\"form-group\">\n                <label htmlFor=\"exampleInputTitle\">Title</label>\n                <input \n                    name=\"title\"\n                    type=\"text\" \n                    className=\"form-control\" \n                    id=\"exampleInputTitle\" \n                    placeholder=\"Title\"\n                    onChange={handleChange}\n                    value={values.title}\n                />\n                {\n                    <p style={{ color: 'red' }}>{errors.title}</p>\n                }\n                \n            </div>\n            <div className=\"form-group\">\n                <label htmlFor=\"exampleInputDes\">Description</label>\n                <input \n                    name=\"description\"\n                    type=\"text\" \n                    className=\"form-control\" \n                    id=\"exampleInputDes\" \n                    placeholder=\"Description\"\n                    onChange={handleChange}\n                    value={values.description}\n                />\n                {\n                    <p style={{ color: 'red' }}>{errors.description}</p>\n                }\n            </div>\n            \n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button variant=\"primary\" type=\"submit\" >\n            Add New\n          </Button>\n        </Modal.Footer>\n        </form>\n      </Modal>\n    )\n}\n\nexport default ModalAddNew;","/Users/cuongcay/Documents/STUDY/FRONTEND/CRUD_React/src/Components/ModalUpdate.js",["40"],{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":34,"column":11,"nodeType":"47","messageId":"48","endLine":34,"endColumn":26},{"ruleId":"49","severity":1,"message":"50","line":49,"column":21,"nodeType":"51","endLine":49,"endColumn":93},{"ruleId":"52","severity":1,"message":"53","line":54,"column":29,"nodeType":"51","endLine":54,"endColumn":111},{"ruleId":"52","severity":1,"message":"53","line":55,"column":29,"nodeType":"51","endLine":55,"endColumn":109},{"ruleId":"45","severity":1,"message":"54","line":1,"column":10,"nodeType":"47","messageId":"48","endLine":1,"endColumn":18},{"ruleId":"55","severity":1,"message":"56","line":17,"column":7,"nodeType":"57","endLine":17,"endColumn":24,"suggestions":"58"},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"no-unused-vars","'handlePageClick' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'show'. Either include it or remove the dependency array.","ArrayExpression",["61"],"no-global-assign","no-unsafe-negation",{"desc":"62","fix":"63"},"Update the dependencies array to be: [dataCouseUpdate, show]",{"range":"64","text":"65"},[576,593],"[dataCouseUpdate, show]"]